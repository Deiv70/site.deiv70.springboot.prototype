openapi: 3.0.3
info:
  title: Swagger Prototype - OpenAPI 3.0
  description: |-
    This is a sample API definition
  contact:
    email: david.gomez.garcia.000@gmail.com
#  termsOfService: http://swagger.io/terms/
#  license:
#    name: Apache 2.0
#    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
  - url: http://localhost:8080/api

tags:
  - name: prototype
    description: Everything about Prototypes
    externalDocs:
      description: Find out more
      url: http://swagger.io

paths:
  /prototypes:
    get:
      x-spring-paginated: true
      tags:
        - prototype
      summary: Get Prototypes
      description: |
        Get an Array of Existing Prototypes.  
        If filtering is needed, use the query parameters.
      operationId: getPrototypes
      parameters:
        - name: name
          in: query
          description: |
            Name value for filtering.  
            ( Multiple name values can be provided with comma separated strings ).
          required: false
          explode: true
          schema:
            type: string
            example: 'prototype'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrototypesCreationResponseDtoModel'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '5XX':
          $ref: '#/components/responses/Error5XX'
  #      security:
  #        - petstore_auth:
  #            - write:pets
  #            - read:pets
    post:
      tags:
        - prototype
      summary: Create Prototypes
      description: |
        Create an Array of New Prototypes.  
        ( If Existing Id is Present, response will be "400: BadRequest" ).
      operationId: createPrototypes
      requestBody:
        description: Prototypes Array Request for Creation
        content:
          application/json:
            schema:
              type:  array
              items:
                $ref: '#/components/schemas/PrototypeDtoModel'
      responses:
        '201':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrototypeDtoModel'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '5XX':
          $ref: '#/components/responses/Error5XX'
    #      security:
    #        - petstore_auth:
    #            - write:pets
    #            - read:pets
    put:
      tags:
        - prototype
      summary: Update Prototypes By ID
      description: |
        Update an Array of Existing Prototypes by Id.  
        ( If Non-Existing Id is Present, response will be "404: NotFound" ).
      operationId: updatePrototypesById
      parameters:
        - $ref: '#/components/parameters/id_path'
      requestBody:
        description: Prototype Updated Request
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PrototypeDtoModel'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrototypeDtoModel'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '5XX':
          $ref: '#/components/responses/Error5XX'
    delete:
      tags:
        - prototype
      summary: Delete Prototypes By ID
      description: |
        Delete an Array of Existing Prototypes by Id.  
        ( If Non-Existing Id is Present, response will be "404: NotFound" ).
      operationId: deletePrototypesById
      requestBody:
        description: Prototype Id Array Request for Deletion
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdRequestDtoModel'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '5XX':
          $ref: '#/components/responses/Error5XX'

  /prototypes/{id}:
    get:
      tags:
        - prototype
      summary: Get Prototype By ID
      description: Returns a single Prototype By Id
      operationId: getPrototypeById
      parameters:
        - $ref: '#/components/parameters/id_path'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrototypeDtoModel'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '5XX':
          $ref: '#/components/responses/Error5XX'
    #      security:
    #        - api_key: []
    #        - petstore_auth:
    #            - write:pets
    #            - read:pets
    put:
      tags:
        - prototype
      summary: Update Prototype By ID
      description: Update an Existing Prototype by Id
      operationId: updatePrototypeById
      parameters:
        - $ref: '#/components/parameters/id_path'
      requestBody:
        description: Prototype Request for Update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrototypeUpdateRequestDtoModel'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrototypeDtoModel'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '5XX':
          $ref: '#/components/responses/Error5XX'
    #      security:
    #        - petstore_auth:
    #            - write:pets
    #            - read:pets
    delete:
      tags:
        - prototype
      summary: Delete Prototype By ID
      description: Delete a Prototype By Id
      operationId: deletePrototypeById
      parameters:
        - $ref: '#/components/parameters/id_path'
      #        - name: api_key
      #          in: header
      #          description: ''
      #          required: false
      #          schema:
      #            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '5XX':
          $ref: '#/components/responses/Error5XX'
#      security:
#        - petstore_auth:
#            - write:pets
#            - read:pets

#  /prototypes/{prototypeId}/uploadImage:
#    post:
#      tags:
#        - prototype
#      summary: uploads an image
#      description: ''
#      operationId: uploadFile
#      parameters:
#        - name: prototypeId
#          in: path
#          description: ID of pet to update
#          required: true
#          schema:
#            type: integer
#            format: int64
#        - name: additionalMetadata
#          in: query
#          description: Additional Metadata
#          required: false
#          schema:
#            type: string
#      requestBody:
#        content:
#          application/octet-stream:
#            schema:
#              type: string
#              format: binary
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ApiResponseDtoModel'
#      security:
#        - petstore_auth:
#            - write:pets
#            - read:pets

components:

  responses:

    Error400:
      description: Invalid Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponseDtoModel'
    Error401:
      description: Authentication Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponseDtoModel'
    Error404:
      description: Id Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponseDtoModel'
    Error5XX:
      description: Server Error occurred on Request Processing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponseDtoModel'

#    PrototypeApiResponseList:
#      description: Successful Operation
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/PrototypeDtoModel'

  schemas:

    ApiErrorResponseDtoModel:
      type: object
      properties:
        code:
          type: integer
          format: int32
          pattern: '^[1-5][0-9]{2}$'
        type:
          type: string
        message:
          type: string
      xml:
        name: 'ApiErrorResponseDtoModel'

    CriteriaDtoModel:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 0
        size:
          type: integer
          format: int32
          example: 10
        sort:
          type: array
          items:
            type: string
            example: id,desc
      xml:
        name: 'CriteriaDtoModel'

    IdRequestDtoModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
      xml:
        name: 'IdRequestDtoModel'

    PrototypesCreationResponseDtoModel:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/CriteriaDtoModel'
        prototypes:
          type: array
          items:
            $ref: '#/components/schemas/PrototypeDtoModel'
      xml:
        name: 'PrototypesCreationResponseDtoModel'

    PrototypeUpdateRequestDtoModel:
      type: object
      properties:
        name:
          type: string
          example: prototype name
        description:
          type: string
          example: This is the description of the prototype
      xml:
        name: 'PrototypeUpdateRequestDtoModel'

    PrototypeDtoModel:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        name:
          type: string
          example: prototype name
        description:
          type: string
          example: This is the description of the prototype
      xml:
        name: 'PrototypeDtoModel'


#    Tag:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        name:
#          type: string
#      xml:
#        name: tag

  parameters:

    id_path:
      name: id
      required: true
      in: path
      description: Object ID
      schema:
        type: string
        format: uuid

    name_notrequired_explode:
      name: name
      in: query
      description: Name value for filtering
      required: false
      explode: true
      schema:
        type: string
        example: 'name'

#  securitySchemes:

#    petstore_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
#          scopes:
#            write:pets: modify pets in your account
#            read:pets: read your pets
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header
